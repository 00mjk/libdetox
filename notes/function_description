
terminology
-----------

TU: translation unit, a block of code that is to be translated
CCF: compiled code fragment, a block of translated code


start_transaction()
-------------------

starts the generation of translated code.

All code executed between start_transaction and commit_transaction shall be executed as translated code. In order to do this, start_transaction first reads the return instruction pointer from the stack (can be found at 4(%ebp)). This is the address of the first instruction that is to be translated.
If required, this function should also initialize data structures needed for bookkeeping etc.
The address of the commit_transaction function has to be stored in a global variable, so that the translate function can recognize such a call.


it should then invoke the translation routine with the address of the first instruction of the first TU as argument. however, the translation routine shall not jump to the CCF yet, because we have return from start_transaction (otherwise, the stack frame of start_transaction is still on the stack).
start_transaction then has to write the address of the first instruction in the CCF to the return instruction pointer, and return.



translate(char* TU_address)
---------------------------

Reads and copies instructions from the TU_address until a control flow instruction is reached, or else a maximum number of instructions (for example 12). These instructions will be subject to binary translation (TBD)
All jump instructions will be modified to invoke the translation routine on the jump target.
The address of the first instruction in the CCF is then written to the return instruction pointer, such that the translated code is executed on return.

If however a call to commit_transaction is reached, the generation of translated code has to be stopped.

commit_transaction()
--------------------

Print a warning if that function is called, as that should never happen. The translation routine shall replace a call to this function with code that ends code translation. If however this function is called, it means that the code translation has stopped at some point and that untranslated code was executed between start_transaction and commit_transaction.


translate_func()
--------------------

When we encounter a call instruction while translating a TU, the point where the function will return to has to be translated, before the control flow can jump to the function.
Therefore, translate_func translates the beginning of a function and stops translating before a call instruction has to be translated, except in case of a recursion. No jump to the translated code is performed.





